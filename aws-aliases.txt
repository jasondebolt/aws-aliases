
'''Type an AWS service name in your terminal an open in your browser:

    $ s3 --> S3 console opens in browser.
    $ ec2 --> EC2 console opens in browser.
   
   Installation:
     1) Install https://github.com/zquestz/s
     2) Run this script and copy output to your .bash_profile and your ~/.config/s/config file.
'''

import os
import sys
import json

services = [
    'accessanalyzer',
    'acm',
    'acm-pca',
    'alexaforbusiness',
    'amplify',
    'apigateway',
    'apigatewaymanagementapi',
    'apigatewayv2',
    'appconfig',
    'application-autoscaling',
    'application-insights',
    'appmesh',
    'appstream',
    'appsync',
    'athena',
    'autoscaling',
    'autoscaling-plans',
    'backup',
    'batch',
    'budgets',
    'ce',
    'chime',
    'cli-dev',
    'cloud9',
    'clouddirectory',
    'cloudformation',
    'cloudfront',
    'cloudhsm',
    'cloudhsmv2',
    'cloudsearch',
    'cloudsearchdomain',
    'cloudtrail',
    'cloudwatch',
    'codebuild',
    'codecommit',
    'codeguru-reviewer',
    'codeguruprofiler',
    'codepipeline',
    'codestar',
    'codestar-connections',
    'codestar-notifications',
    'cognito-identity',
    'cognito-idp',
    'cognito-sync',
    'comprehend',
    'comprehendmedical',
    'compute-optimizer',
    'configservice',
    'configure',
    'connect',
    'connectparticipant',
    'cur',
    'dataexchange',
    'datapipeline',
    'datasync',
    'dax',
    'ddb',
    'deploy',
    'detective',
    'devicefarm',
    'directconnect',
    'discovery',
    'dlm',
    'dms',
    'docdb',
    'ds',
    'dynamodb',
    'dynamodbstreams',
    'ebs',
    'ec2',
    'ec2-instance-connect',
    'ecr',
    'ecs',
    'efs',
    'eks',
    'elastic-inference',
    'elasticache',
    'elasticbeanstalk',
    'elastictranscoder',
    'elb',
    'elbv2',
    'emr',
    'es',
    'events',
    'firehose',
    'fms',
    'forecast',
    'forecastquery',
    'frauddetector',
    'fsx',
    'gamelift',
    'glacier',
    'globalaccelerator',
    'glue',
    'greengrass',
    'groundstation',
    'guardduty',
    'health',
    'history',
    'iam',
    'imagebuilder',
    'importexport',
    'inspector',
    'iot',
    'iot-data',
    'iot-jobs-data',
    'iot1click-devices',
    'iot1click-projects',
    'iotanalytics',
    'iotevents',
    'iotevents-data',
    'iotsecuretunneling',
    'iotthingsgraph',
    'kafka',
    'kendra',
    'kinesis',
    'kinesis-video-archived-media',
    'kinesis-video-media',
    'kinesis-video-signaling',
    'kinesisanalytics',
    'kinesisanalyticsv2',
    'kinesisvideo',
    'kms',
    'lakeformation',
    'lambda',
    'lex-models',
    'lex-runtime',
    'license-manager',
    'lightsail',
    'logs',
    'machinelearning',
    'macie',
    'managedblockchain',
    'marketplace-catalog',
    'marketplace-entitlement',
    'marketplacecommerceanalytics',
    'mediaconnect',
    'mediaconvert',
    'medialive',
    'mediapackage',
    'mediapackage-vod',
    'mediastore',
    'mediastore-data',
    'mediatailor',
    'meteringmarketplace',
    'mgh',
    'migrationhub-config',
    'mobile',
    'mq',
    'mturk',
    'neptune',
    'networkmanager',
    'opsworks',
    'opsworks-cm',
    'opsworkscm',
    'organizations',
    'outposts',
    'personalize',
    'personalize-events',
    'personalize-runtime',
    'pi',
    'pinpoint',
    'pinpoint-email',
    'pinpoint-sms-voice',
    'polly',
    'pricing',
    'qldb',
    'qldb-session',
    'quicksight',
    'ram',
    'rds',
    'rds-data',
    'redshift',
    'rekognition',
    'resource-groups',
    'resourcegroupstaggingapi',
    'robomaker',
    'route53',
    'route53domains',
    'route53resolver',
    's3',
    's3api',
    's3control',
    'sagemaker',
    'sagemaker-a2i-runtime',
    'sagemaker-runtime',
    'savingsplans',
    'schemas',
    'sdb',
    'secretsmanager',
    'securityhub',
    'serverlessrepo',
    'service-quotas',
    'servicecatalog',
    'servicediscovery',
    'ses',
    'sesv2',
    'shield',
    'signer',
    'sms',
    'snowball',
    'sns',
    'sqs',
    'ssm',
    'sso',
    'sso-oidc',
    'stepfunctions',
    'storagegateway',
    'sts',
    'support',
    'swf',
    'textract',
    'transcribe',
    'transfer',
    'translate',
    'waf',
    'waf-regional',
    'wafv2',
    'workdocs',
    'worklink',
    'workmail',
    'workmailmessageflow',
    'workspaces',
    'xray'
]


def getExistingWebConfig():
  filename = os.path.join(os.path.expanduser('~'), '.config/s/config')
  currentConfig = open(filename, 'r').read()
  return json.loads(currentConfig)

def getExistingWebConfigKeys(web_config):
    return [key["name"] for key in web_config["customProviders"]]

def main(args):
    cmd = args[1]
    if cmd == 'web':
        currentWebConfig = getExistingWebConfig()
        currentWebConfigKeys = getExistingWebConfigKeys(currentWebConfig)
        customProviders = []
        for service in services:
            if service not in currentWebConfigKeys:
                customProviders.append(
                    {
                        'name': '{0}'.format(service),
                        'url': 'http://console.aws.amazon.com/{0}'.format(service),
                        'tags': []
                    }
                )
        currentWebConfig["customProviders"].extend(customProviders)
        print(json.dumps(currentWebConfig, indent=2))
    elif cmd == 'alias':
        aliasList = []
        for service in services:
            aliasList.append('alias {0}="s -p {0} ."'.format(service))
        print('\n'.join(aliasList))

if __name__ == '__main__':
    main(sys.argv)
